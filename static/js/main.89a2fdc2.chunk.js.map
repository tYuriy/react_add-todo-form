{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","email","name","className","href","TodoInfo","todo","id","title","completed","classNames","TodoList","todos","map","username","getUser","userId","usersFromServer","find","regEx","App","useState","setTitle","setUser","isTitleEmpty","setIsTitleEmpty","isNotSelected","setIsNotSelected","todoList","setTodoList","action","method","type","value","onChange","event","target","slice","match","placeholder","userFromServer","onClick","preventDefault","Math","max","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.89a2fdc2.chunk.js","sourcesContent":["import { User } from '../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    user,\n    completed,\n  } = todo;\n\n  return (\n    <li\n      data-id={id}\n      className={classNames(\n        'TodoInfo',\n        { 'TodoInfo--completed': completed },\n      )}\n    >\n      <h2\n        className=\"TodoInfo__title\"\n      >\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </li>\n  );\n};\n","import { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <ul className=\"TodoList\">\n      {todos.map((todo: Todo) => {\n        return (\n          <TodoInfo key={todo.id} todo={todo} />\n        );\n      })}\n    </ul>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './components/types/Todo';\nimport { User } from './components/types/User';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport './App.scss';\n\nconst getUser = (userId: number): User | null => {\n  return usersFromServer.find(user => user.id === userId) || null;\n};\n\nconst todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nconst regEx = /([A-Z]|[А-Я]|\\d|\\s)/gi;\n\nexport const App = () => {\n  const [title, setTitle] = useState('');\n  const [user, setUser] = useState('');\n  const [isTitleEmpty, setIsTitleEmpty] = useState(false);\n  const [isNotSelected, setIsNotSelected] = useState(false);\n  const [todoList, setTodoList] = useState(todos);\n\n  const handleTodoAdd = () => (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n\n    setIsTitleEmpty(!title);\n    setIsNotSelected(!user);\n    if (title && user) {\n      setTodoList([...todoList, {\n        id: Math.max(...todoList.map(todo => todo.id)) + 1,\n        title,\n        userId: +user,\n        completed: false,\n        user: getUser(+user),\n      }]);\n      setTitle('');\n      setUser('');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form action=\"/api/users\" method=\"POST\">\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={title}\n            onChange={(event) => {\n              if (event.target.value.slice(-1).match(regEx)) {\n                setTitle(event.target.value);\n                setIsTitleEmpty(false);\n              }\n            }}\n            placeholder=\"Enter a title\"\n          />\n          {isTitleEmpty && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={user}\n            onChange={\n              (event) => {\n                setUser(event.target.value);\n                setIsNotSelected(false);\n              }\n            }\n            placeholder=\"select a user\"\n          >\n            <option\n              value=\"\"\n            >\n              Choose a user\n            </option>\n            {usersFromServer.map(userFromServer => (\n              <option\n                value={userFromServer.id}\n                key={userFromServer.id}\n              >\n                {userFromServer.name}\n              </option>\n            ))}\n          </select>\n\n          {isNotSelected && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n          onClick={handleTodoAdd}\n        >\n          Add\n        </button>\n      </form>\n      <TodoList todos={todoList} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}